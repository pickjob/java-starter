<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="app.framework.mybatis.mapper">
    <!--
        顶层元素:
            CRUD:
                select:
                    id: 在命名空间中唯一的标识符
                    parameterType: 将会传入这条语句的参数的类全限定名或别名。默认值为未设置(unset)。
                    resultType: 期望从这条语句中返回结果的类全限定名或别名。resultType 和 resultMap 之间只能同时使用一个。
                    resultMap: 对外部 resultMap 的命名引用。resultType 和 resultMap 之间只能同时使用一个。
                    flushCache: 将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。
                    useCacheP: 将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。
                    statementType: 可选 STATEMENT，PREPARED 或 CALLABLE。默认值：PREPARED。
                    resultSetType: FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT(等价于 unset) 中的一个，默认值为 unset (依赖数据库驱动)。
                    resultOrdered: 这个设置仅针对嵌套结果 select 语句：如果为 true，则假设结果集以正确顺序(排序后)执行映射，当返回新的主结果行时，将不再发生对以前结果行的引用。这样可以减少内存消耗。默认值：false。
                insert / update / delete:
                    id: 在命名空间中唯一的标识符
                    parameterType: 将会传入这条语句的参数的类全限定名或别名。默认值为未设置(unset)。
                    flushCache: 将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：(对 insert、update 和 delete 语句)true。
                    statementType: 可选 STATEMENT，PREPARED 或 CALLABLE。默认值：PREPARED。
                    useGeneratedKeys: (仅适用于 insert 和 update)这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键(比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段)，默认值：false。
                    keyProperty: (仅适用于 insert 和 update)指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置(unset)。如果生成列不止一个，可以用逗号分隔多个属性名称。
                    keyColumn: (仅适用于 insert 和 update)设置生成键值在表中的列名，在某些数据库(像 PostgreSQL)中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。
                sql – A reusable chunk of SQL that can be referenced by other statements.
            resultMap – The most complicated and powerful element that describes how to load your objects from the database result sets.
                id: 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能
                result: 注入到字段或 JavaBean 属性的普通结果
                    property: 映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性(property)，会先使用该属性。否则 MyBatis 将会寻找给定名称的字段(field)。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。
                    column: 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。
                    javaType: 一个 Java 类的全限定名，或一个类型别名(关于内置的类型别名，可以参考上面的表格)。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。
                    jdbcType: JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。
                    typeHandler: 我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。
                constructor: 用于在实例化类时，注入结果到构造方法中
                    idArg: ID 参数；标记出作为 ID 的结果可以帮助提高整体性能
                    arg: 将被注入到构造方法的一个普通结果
                        column: 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。
                        javaType: 一个 Java 类的完全限定名，或一个类型别名(关于内置的类型别名，可以参考上面的表格)。
                        jdbcType: JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。
                        typeHandler: 我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。
                        select: 用于加载复杂类型属性的映射语句的 ID，它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。
                        resultMap: 结果映射的 ID，可以将嵌套的结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。
                        name: 构造方法形参的名字。从 3.4.3 版本开始，通过指定具体的参数名，你可以以任意顺序写入 arg 元素。参看上面的解释。
                association: 一个复杂类型的关联；许多结果将包装成这种类型
                    嵌套结果映射: 关联可以是 resultMap 元素，或是对其它结果映射的引用
                    column: 数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。
                    select: 用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。
                    fetchType: 可选的。有效值为 lazy 和 eager。 指定属性后，将在映射中忽略全局配置参数 lazyLoadingEnabled，使用属性的值。

                    resultMap: 结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。
                    columnPrefix: 当连接多个表时，你可能会不得不使用列别名来避免在 ResultSet 中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。
                    notNullColumn: 默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列中任意一列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置(unset)。
                    autoMapping: 	如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配 select 或 resultMap 元素使用。默认值：未设置(unset)。
                collection: 一个复杂类型的集合
                    嵌套结果映射: 集合可以是 resultMap 元素，或是对其它结果映射的引用
                discriminator: 使用结果值来决定使用哪个 resultMap
                    case:  基于某些值的结果映射
                        嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射
            cache – Configuration of the cache for a given namespace.
            cache-ref – Reference to a cache configuration from another namespace.
        参数:
            #{property, javaType=int, jdbcType=NUMERIC}
            ${column}
        动态SQL:
            if
                <select id="findActiveBlogWithTitleLike" resultType="Blog">
                    SELECT * FROM BLOG
                    WHERE state = ‘ACTIVE’
                    <if test="title != null">
                        AND title like #{title}
                    </if>
                </select>
            choose、when、otherwise
                <select id="findActiveBlogLike" resultType="Blog">
                    SELECT * FROM BLOG WHERE state = ‘ACTIVE’
                    <choose>
                          <when test="title != null">
                              AND title like #{title}
                          </when>
                          <when test="author != null and author.name != null">
                              AND author_name like #{author.name}
                          </when>
                          <otherwise>
                              AND featured = 1
                          </otherwise>
                    </choose>
                </select>
            trim、where、set
                <select id="findActiveBlogLike" resultType="Blog">
                    SELECT * FROM BLOG
                    WHERE
                    <if test="state != null">
                        state = #{state}
                   </if>
                   <if test="title != null">
                        AND title like #{title}
                   </if>
                   <if test="author != null and author.name != null">
                        AND author_name like #{author.name}
                   </if>
               </select>
               <update id="updateAuthorIfNecessary">
                    update Author
                        <set>
                            <if test="username != null">username=#{username},</if>
                            <if test="password != null">password=#{password},</if>
                            <if test="email != null">email=#{email},</if>
                            <if test="bio != null">bio=#{bio}</if>
                        </set>
                    where id=#{id}
                </update>
                <trim prefix="SET" suffixOverrides=",">
                    ...
                </trim>
            foreach
                <select id="selectPostIn" resultType="domain.blog.Post">
                  SELECT *
                  FROM POST P
                  <where>
                      <foreach item="item" index="index" collection="list" open="ID in (" separator="," close=")" nullable="true">
                          #{item}
                      </foreach>
                  </where>
                </select>
            script
                @Update({"<script>",
                      "update Author",
                      "  <set>",
                      "    <if test='username != null'>username=#{username},</if>",
                      "    <if test='password != null'>password=#{password},</if>",
                      "    <if test='email != null'>email=#{email},</if>",
                      "    <if test='bio != null'>bio=#{bio}</if>",
                      "  </set>",
                      "where id=#{id}",
                      "</script>"})
                    void updateAuthorValues(Author author);
    -->
    <cache
            eviction="FIFO"
            flushInterval="60000"
            size="512"
            readOnly="true"/>
</mapper>